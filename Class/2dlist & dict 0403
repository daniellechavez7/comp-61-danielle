grid = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
    ]

grid_dict = {}

grid_dict.update({'0':{'0': 1, '1': 2, '2': 3}})
grid_dict.update({'1':{'0': 4, '1': 5, '2': 6}})
grid_dict.update({'2':{'0': 7, '1': 8, '2': 9}})


total = 0

def sum_region(grid, row):
    global total
    print(grid[row])
    for j in grid[row]:
        print(j)
        total += j
    if(row < 2):
        sum_region(grid, row + 1)
   
def sum_region_dict(grid, row):
    global total
    print(grid)
    for key, value in grid.items():
        print(key)
        print(value)
        for key_inner, value_inner in value.items():
            print(key_inner)
            print(value_inner)
            total += value_inner

def modify_dict(grid_dict):
    for key, value in grid_dict.items():
        # print(key)
        # print(value)
        for key_inner, value_inner in value.items():
            # print(key_inner)
            # print(value_inner)
            grid_dict[key][key_inner] = int(input("Enter a Number at " +key + " " + key_inner + ": " ))

    print(grid_dict)

# create a new function, which take user input
# and give a new value to this dict
# {
#     {xx,xx,xx},
#     {xx,xx,xx},
#     {xx,xx,xx},
# }
# Example usage
grid = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]
grid_dict={}
grid_dict.update({'0': {'0': 1, '1': 2, '2': 3}})
grid_dict.update({'1': {'0': 4, '1': 5, '2': 6}})
grid_dict.update({'2': {'0': 7, '1': 8, '2': 9}})


modify_dict(grid_dict)

# print(total)

class FancyDict:
    def __init__(self):
        self.grid_dict = {}
    
    def getUserInput():
        for i in range(3): 
            print(i)
            user_input = input("Enter here:")

    
  #def display_sum():
      #  return sum
        

fancyDict = FancyDict()
fancyDict.getUserInput()
fancyDict.display_sum()

import random

# Initialize a 3x3 grid with random 0s and 1s
visual_two_d_list = []
for i in range(3):
    visual_line = [random.randint(0, 1) for j in range(3)]
    visual_two_d_list.append(visual_line)  # Append a copy of the line

# Print the initial grid (for debugging)
for row in visual_two_d_list:
    print(row)

# Get user input
input_x = int(input("input x position (0-2): "))
input_y = int(input("input y position (0-2): "))

# Check the cell and update it accordingly
if visual_two_d_list[input_x][input_y] == 1:
    visual_two_d_list[input_x][input_y] = "X"
    print("You lose :(")
else:
    visual_two_d_list[input_x][input_y] = "_"
    print("Keep going")

# Print the updated grid
for row in visual_two_d_list:
    print(row)

