a = 1 
b = 2
c = a + b 

def test(_a, _b):       # _ to differentiate from the a and b on the top
    c = _a + _b 
    return c

def test1(_a, _b):  
    global c 
    c = _a + _b

def test2(_a, _b):
    _a += 3 
    _b -= 2
    c = _a + _b 
    return _a, _b, c

def test3(_a = 4, _b = 2): 
    c = _a + _b
    return c 
def test4(_a, _b = 2): #must pass one argument
    c = _a + _b 
    return c 
#def test5(_a, _b = 2, _c): cannot have _c after the initialized function 
def test5(_a, _c, _b = 2):
    c = _a + _b 
    return c 


c = test(1,2)      #only use equal with return 
c = test1(1,2)      #will not work (no return) 
test1(1,2)   # now will return with no equal sign

a,b,c = test2(1,2) #if you need as many variables as you return 
c = test3()
c = test3(1,2)
c = test4(5)
c = test5(1, 2, 3)
c = test5 (1,3)

class TestClass:        
    def __init__(self, _a = 4, _b = 2): #define arguement 
        self.a = _a 
        self.b = _b
        self.c = 0 

    def test(self):
        self.c = self.a + self.b 
        print("c value:", self.c)

#testClass = TestClass()  # will not work if theres is defined arguments
#testClass.test()        # only work if you define values 

testClass1 = TestClass(3, 4) #pass values through argument directly, only need one line
testClass1.test()

testClass2 = TestClass(3, 3)
#testClass2.b = 4  # do not need this
testClass2.test()    #call upon function , if argument do not need direct numbers 

testClass3 = TestClass(3, 2)
#testClass3.a = 3
#testClass3.b = 2        #does not effect anything else 
testClass3.test()       #everytime you make a copy, create a new instant 

l = [1, 2, 3]
print(l)
print(l[0])
print(l[2])
print(len(l)) #lens is not index, how many variables in list
#l1 = [1, False, "hello", TestClass()]   #collection of variables

testClass7 = TestClass(l[0], l[1])
testClass7.test()

l2 = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9],
]

l3 = [1, 2, 3]
l4 = [4, 5, 6]      #key for list in index
l5 = [7, 8, 9]
l6 = [l3, l4, l5]

print (l2[1])
print(l2[1][2])
print(l6[1])
print(l6[1][2])

d = {"0": 4, "1": 5, "2": 6}    #key for dict is whatever key you define 
print(d["0"])

d = {"first": 7, "second": 8, "third": 9}
print(d["first"])